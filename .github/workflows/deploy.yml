name: Build & Deploy
on:
  push:
    branches: [ main ]

jobs:
  build-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Free disk space
        run: |
          echo "Disk usage before cleanup:"
          df -h
          sudo rm -rf /usr/local/lib/android || true
          sudo rm -rf /usr/share/dotnet || true
          sudo rm -rf /opt/hostedtoolcache || true
          sudo rm -rf /usr/local/share/boost || true
          sudo rm -rf /tmp/* || true
          sudo docker system prune -af || true
          sudo docker volume prune -f || true
          echo "Disk usage after cleanup:"
          df -h

      - name: Login GHCR
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

      - name: Compute tags (once)
        id: vars
        run: |
          echo "IMAGE_BASE=ghcr.io/${GITHUB_REPOSITORY}" >> $GITHUB_ENV
          echo "TAG_LATEST=latest" >> $GITHUB_ENV
          echo "TAG_TS=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
          echo "TAG_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Build image (latest + ts + sha)
        run: |
          docker build \
            -t "$IMAGE_BASE:$TAG_LATEST" \
            -t "$IMAGE_BASE:$TAG_TS" \
            -t "$IMAGE_BASE:sha-$TAG_SHA" .

      - name: Push image (latest + ts + sha)
        run: |
          docker push "$IMAGE_BASE:$TAG_LATEST"
          docker push "$IMAGE_BASE:$TAG_TS"
          docker push "$IMAGE_BASE:sha-$TAG_SHA"

  deploy:
    needs: build-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Copy compose to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "docker-compose.yml"
          target: "/opt/newsletter/"

      - name: Remote deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -euo pipefail
            COMPOSE_DIR="/opt/newsletter"
            cd "$COMPOSE_DIR"

            # Installa Docker e Docker Compose se non presenti
            if ! command -v docker >/dev/null; then
              echo "Docker non trovato, installazione in corso..."
              curl -fsSL https://get.docker.com | sh
              sudo usermod -aG docker $USER || true
              echo "Per favore, esegui di nuovo il workflow."
              exit 1 # Esce per permettere al gruppo docker di applicarsi
            fi
            if ! docker compose version >/dev/null 2>&1; then
              echo "Docker Compose non trovato, installazione in corso..."
              DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
              mkdir -p $DOCKER_CONFIG/cli-plugins
              curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 \
                -o $DOCKER_CONFIG/cli-plugins/docker-compose
              chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
            fi

            # Login a GHCR per poter scaricare l'immagine privata
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

            # Aggiorna/crea .env con chiavi frontend/session richieste
            touch .env
            cp -a .env ".env.bak.$(date +%Y%m%d%H%M%S)" || true
            set_env() { k="$1"; v="$2"; if grep -qE "^$k=" .env; then sed -i -E "s|^$k=.*|$k=$v|" .env; else printf '%s=%s\n' "$k" "$v" >> .env; fi; }
            set_env FRONTEND_ORIGIN https://app.thegist.tech
            set_env REDIRECT_URI https://app.thegist.tech/auth/callback
            set_env SESSION_DOMAIN .thegist.tech
            set_env SESSION_HTTPS_ONLY True
            echo "--- .env (chiavi aggiornate) ---"
            grep -E '^(FRONTEND_ORIGIN|REDIRECT_URI|SESSION_DOMAIN|SESSION_HTTPS_ONLY)=' .env || true

            # Scarica l'ultima versione dell'immagine e avvia i container
            docker compose pull
            docker compose up -d

            # Mostra lo stato e i log recenti
            echo "--- Stato dei container ---"
            docker compose ps
            echo "--- Log recenti dell'app ---"
            docker compose logs --no-color --tail=100 app || true

            # Sanity check: /debug/oauth-config deve mostrare il redirect corretto
            echo "--- Sanity: /debug/oauth-config ---"
            if command -v curl >/dev/null 2>&1; then
              cfg_json=$(curl -fsS https://app.thegist.tech/debug/oauth-config || true)
              echo "$cfg_json" | sed -E 's/.{160}/&\n/g' || true
              if echo "$cfg_json" | grep -q '"redirect_uri_effective"\s*:\s*"https://app.thegist.tech/auth/callback"'; then
                echo "Sanity OK: redirect_uri_effective corretto"
              else
                echo "ATTENZIONE: redirect_uri_effective non corrisponde, verifica proxy/ENV" >&2
              fi
            fi
